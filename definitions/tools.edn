; DUMP [TOOLS] 15.6.1.1280 ( addr u -- )
;
; Display the contents of u consecutive addresses starting at addr. The
; format of the display is implementation dependent.
;
; DUMP may be implemented using pictured numeric output words. Consequently,
; its use may corrupt the transient region identified by #>.
;
; ---
; Enforth Output Format (80-column screen represented by the box):
; +--------------------------------------------------------------------------------+
; |00000000  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  0123456789abcdef     |
; |00000010  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  0123456789abcdef     |
; |...                                                                             |
; +--------------------------------------------------------------------------------+
{:token :dump
 :args [[:addr :u] []]
 :source ": HEXCELL ( u --)  0 <# # # # # # # # # #> TYPE ;
          : HEXCHAR ( c --)  0 <# # # #> TYPE ;
          : EMITVALID ( c --)  DUP 32 < OVER 127 > OR
            IF DROP [CHAR] . THEN EMIT ;
          : DUMPLINE ( addr u --)
            OVER HEXCELL 2 SPACES                     -- address
            DUP 0 DO OVER I + C@ HEXCHAR SPACE LOOP   -- hex vals
            16 OVER - 3 * SPACES  SPACE               -- padding
            0 DO DUP I + C@ EMITVALID LOOP  DROP;
          : DUMP ( addr u --)
            BASE @ >R  HEX ( addr u R:orig-base)
            BEGIN
              ?DUP
            WHILE
              2DUP 16 MIN ( addr u addr line-u) TUCK ( a u lu a lu)
              CR DUMPLINE ( a u lu) /STRING
            REPEAT
            ( addr R:orig-base) DROP
            R> BASE ! ;"
 :pfa [:base :fetch :tor :hex
       :qdup :izbranch 75
         :twodup :icharlit 16 :min :tuck :cr
         ; DUMPLINE
           :over
           ; HEXCELL
             :zero :lessnumsign :numsign :numsign :numsign :numsign
             :numsign :numsign :numsign :numsign :numsigngrtr :type
           :icharlit 2 :spaces
           :dup :zero :pdo
             :over :i :plus :cfetch
             ; HEXCHAR
               :zero :lessnumsign :numsign :numsign :numsigngrtr :type
             :space :piloop -12
           :icharlit 16 :over :minus :icharlit 3 :star :spaces :space
           :zero :pdo
             :dup :i :plus :cfetch
             ; EMITVALID
               :dup :icharlit 32 :lessthan :over :icharlit 127 :greaterthan :or
               :izbranch 4 :drop :icharlit "'.'" :emit
             :piloop -20
           :drop
         :slashstring :ibranch -76
       :drop
       :rfrom :base :store
       :exit]}

{:token :words
 :args [[] []]
 :source ": VISIBLE? ( xt -- f ) C@XT %01000000 AND 0= ;
          : .NAME ( xt -- )
            DUP NAME-LENGTH  OVER SWAP - SWAP ( xt-end xt-start)
            BEGIN 2DUP <> WHILE 1- DUP C@XT $7F AND EMIT REPEAT 2DROP ;
          : WORDS ( -- )
            LATEST @
            BEGIN
              ?DUP
            WHILE
              DUP FFI?
              IF
                DUP >FFIDEF  DUP FFIDEF-NAME  SWAP FFIDEF-NAMELEN  ITYPE SPACE
              ELSE
                DUP VISIBLE? IF DUP .NAME SPACE THEN
              THEN
              LFA@
            REPEAT ;"
 :pfa [; DEF-WORDS
         :latest :fetch
         :qdup :izbranch 48
           :dup :ffiq :izbranch 11
             :dup :toffidef :dup :ffidefname :swap :ffidefnamelen :itype :space
               :ibranch 31
             :dup
             ; VISIBLE?
               :cfetchxt :icharlit 0x40 :and :zeroequals
             :izbranch 24
               :dup
               ; .NAME
                 :dup :namelength :over :swap :minus :swap
                 :twodup :notequals :izbranch 10
                   :oneminus :dup :cfetchxt :icharlit 0x7f :and :emit :ibranch -12
                 :twodrop
               :space
             :lfafetch :ibranch -49
       :exit]}
